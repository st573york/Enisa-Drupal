drupal:
  root: web
  base_url: ${env.DRUPAL_BASE_URL}
  virtual_host: ${env.VIRTUAL_HOST}
  site:
    profile: 'minimal'
    name: ${env.DRUPAL_SITE_NAME}
    existing_config: true
    generate_db_url: false
  account:
    name: ${env.DRUPAL_ACCOUNT_USERNAME}
    password: ${env.DRUPAL_ACCOUNT_PASSWORD}
  additional_settings: |
    // Proxy configuration.
    if (intval(getenv('DRUPAL_PROXY_ENABLE')) === 1) {
      $settings['http_client_config']['proxy']['http'] = getenv('DRUPAL_PROXY_HTTP');
      $settings['http_client_config']['proxy']['https'] = getenv('DRUPAL_PROXY_HTTPS');
      $settings['http_client_config']['proxy']['no'] = array_map('trim', explode(',', getenv('DRUPAL_PROXY_NO')));
    }

    // Additional database configuration.
    $databases['default']['default']['init_commands'] = [
      'isolation_level' => 'SET SESSION TRANSACTION ISOLATION LEVEL READ COMMITTED',
    ];

    // Set trusted host patterns.
    if (getenv('DRUPAL_TRUSTED_HOST_PATTERNS')) {
      $settings['trusted_host_patterns'] = explode(',', getenv('DRUPAL_TRUSTED_HOST_PATTERNS'));
    }

    // Override site email.
    $config['system.site']['mail'] = !empty(getenv('SMTP_FROM')) ? getenv('SMTP_FROM') : 'digit-example@localhost.local';

    // Varnish purge settings.
    if (!empty(getenv('DRUPAL_VARNISH_HOSTS'))) {
      $config['dropsolid_purge.config']['site_name'] = getenv('DRUPAL_SITE_NAME');
      $config['dropsolid_purge.config']['site_group'] = getenv('DRUPAL_SITE_GROUP');
      $config['dropsolid_purge.config']['site_environment'] = getenv('DRUPAL_ENVIRONMENT');
      $config['dropsolid_purge.config']['site_group'] = getenv('DRUPAL_VARNISH_GROUP');
      $load_balancers = [];
      $drupal_flush_cred = getenv('DRUPAL_FLUSH_CREDS');
      foreach (explode(',', getenv('DRUPAL_VARNISH_HOSTS')) as $ip) {
        $load_balancers[$ip] = [
          'ip' => $drupal_flush_cred . '@' . trim($ip),
          'protocol' => 'http',
          'port' => '7790',
        ];
      }
      $config['dropsolid_purge.config']['loadbalancers'] = $load_balancers;
    }

    // Monolog services and parameter.
    $settings['container_yamls'][] = 'sites/default/monolog.services.yml';

    // Solr services.
    if (getenv('SEARCH_API_SERVER_SS_SOLR_HOST')) {
      $config['search_api.server.solr']['backend_config']['connector_config']['host'] = getenv('SEARCH_API_SERVER_SS_SOLR_HOST');
      $config['search_api.server.solr']['backend_config']['connector_config']['port'] = getenv('SEARCH_API_SERVER_SS_SOLR_PORT');
      $config['search_api.server.solr']['backend_config']['connector_config']['path'] = getenv('SEARCH_API_SERVER_SS_SOLR_PATH');
      $config['search_api.server.solr']['backend_config']['connector_config']['core'] = getenv('SEARCH_API_SERVER_SS_SOLR_CORE');
    }

    // Memcache settings.
    if (!empty(getenv('DRUPAL_MEMCACHE_HOSTS')) && !\Drupal\Core\Installer\InstallerKernel::installationAttempted()) {
      $settings['cache']['default'] = 'cache.backend.memcache';
      $settings['cache']['bins']['render'] = 'cache.backend.memcache';
      $memcached_hosts = explode(',', getenv('DRUPAL_MEMCACHE_HOSTS'));
      foreach ($memcached_hosts as $host) {
        $settings['memcache']['servers'][$host] = 'default';
      }
    }

    // Set reverse proxy.
    if (!empty(getenv('DRUPAL_REVERSE_PROXY_ENABLE'))) {
      $settings["reverse_proxy"] = (bool) getenv('DRUPAL_REVERSE_PROXY_ENABLE');
      $settings["reverse_proxy_addresses"] = explode(',', getenv('DRUPAL_REVERSE_PROXY_ADDRESSES'));
    }

    // Set OE_DASHBOARD_AGENT configuration.
    if (!empty(getenv('DASHBOARD_TOKEN'))) {
      $settings["oe_dashboard_agent.token"] = getenv('DASHBOARD_TOKEN');
      $settings["oe_dashboard_agent.allowed_ips"] = explode(',', getenv('DASHBOARD_ALLOWED_IPS'));
    }

selenium:
  host: 'http://selenium'
  port: '4444'
  browser: 'chrome'

toolkit:
  project_id: ${env.TOOLKIT_PROJECT_ID}
  clone:
    dumpfile: mysql.tar
    commands:
    after:
    - task: exec
      command: composer update
    - task: exec
      command: composer drupal:setup
  test:
    behat:
      base_url: ${env.DRUPAL_BASE_URL}
      tags:
        clone: '@clone'
        clean: '@clean'
  hooks:
    pre-push:
      commands:
        - toolkit:test-phpcs
        - toolkit:test-phpmd
        - toolkit:lint-php
        - toolkit:test-phpstan
    commit-msg:
      example: 'ABC-123: The commit message'
      conditions:
        - message: 'The commit message must start with the JIRA issue number.'
          regex: /^[A-Z]+\-\d+/
        - message: 'The JIRA issue number must be followed by a colon and space.'
          regex: /^[A-Z]+\-\d+:\ /
        - message: 'The subject must start with capital letter.'
          regex: /^[A-Z]+\-\d+:\ [A-Z]/
  build:
    dev:
      commands:
        - { task: run, command: toolkit:setup-behat }
        # Fix permissions for monolog output files folder.
        - { task: mkdir, dir: '/var/log/drupal', mode: '0777' }
    custom-code-folder: 'lib'
